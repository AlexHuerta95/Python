# 3.3 Write a program to prompt for a score between 0.0 and 1.0. If the score is out of range, print an error.
# If the score is between 0.0 and 1.0, print a grade using the following table:
# Score Grade
# >= 0.9 A
# >= 0.8 B
# >= 0.7 C
# >= 0.6 D
# < 0.6 F
# If the user enters a value out of range, print a suitable error message and exit. For the test, enter a score of 0.85.

score = float(input("Enter Score: "))

if score <= 1.0 and score >= 0.0:
    if score >= 0.9:
        print("A")
    elif score >= 0.8:
        print("B")
    elif score >= 0.7:
        print("C")
    elif score >= 0.6:
        print("D")
    else:
        print("F")
elif score > 1.0 or score < 0.0:
    print("Value out of range")

# 4.6 Write a program to prompt the user for hours and rate per hour using input to compute gross pay.
# Pay should be the normal rate for hours up to 40 and time-and-a-half for the hourly rate for all hours
# worked above 40 hours. Put the logic to do the computation of pay in a function called compute pay() and
# use the function to do the computation. The function should return a value. Use 45 hours and a rate of 10.50
# per hour to test the program (the pay should be 498.75). You should use input to read a string and float() to
# convert the string to a number. Do not worry about error checking the user input unless you want to - you can
# assume the user types numbers properly. Do not name your variable sum or use the sum() function.

def computepay(h, r):
    if h > 40.0:
        pay = (r * 40.0) + (h - 40) * 1.5 * r
    else:
        pay = h * r
    return pay

hrs = float(input("Enter Hours: "))
rate = float(input("Enter Pay rate: "))
p = computepay(hrs, rate)
print(p)


# 5.2 Write a program that repeatedly prompts a user for integer numbers until the user enters 'done'. Once 'done' is
# entered, print out the largest and smallest of the numbers. If the user enters anything other than a valid number
# catch it with a try/except and put out an appropriate message and ignore the number. Enter 7, 2, bob, 10, and 4 and
# match the output below.

largest = None
smallest = None
while True:
    num = input("Enter a number: ")
    if num == "done":
        break

    try:
        number = int(num)
    except ValueError:
        print("Invalid input")
    else:
        if smallest is None:
            smallest = number
            largest = number
        elif number > largest:
            largest = number
        elif smallest > number:
            smallest = number

print("Maximum is", largest)
print("Minimum is", smallest)

# 7.1 Write a program that prompts for a file name, then opens that file and reads through the file,
# and print the contents of the98 file in upper case. Use the file words.txt to produce the output below.

fname = input("Enter file name: ")
fh = open(fname, "r")

print(fh.readline().upper().rstrip())

# 7.2 Write a program that prompts for a file name, then opens that file and reads through the file,
# looking for lines of the form:
# X-DSPAM-Confidence:    0.8475
# Count these lines and extract the floating point values from each of the lines and compute the average of those
# values and produce an output as shown below. Do not use the sum() function or a variable named sum in your solution.

# Use the file name mbox.txt-short.txt as the file name

fname = input("Enter file name: ")
fh = open(fname)
cnt = 0
total = 0
answer = 0
for line in fh:
    if not line.startswith("X-DSPAM-Confidence:"): continue
    cnt = cnt + 1
    number = float(line[21:])
    total = number + total
ans = total / cnt

print("Average spam confidence:", ans)

# 8.4 Open the file romeo.txt and read it line by line. For each line, split the line into a list of words using
# the split() method. The program should build a list of words. For each word on each line check to see if the word
# is already in the list and if not append it to the list. When the program completes, sort and print the resulting
# words in alphabetical order.

fname = input("Enter file name: ")
fh = open(fname)
lst = list() # list for the desired output
for line in fh: # to read every line of file romeo.txt
    palabra = line.rstrip().split() # to eliminate the unwanted blanks and turn the line into a list of words
    for element in palabra: # check every element in word
        if element in lst: # if element is repeated
            continue # do nothing
        else: # else if element is not in the list
            lst.append(element) # append
lst.sort() # sort the list (de-indent indicates that you sort when the loop ends)
print(lst) # print the list


# 8.5 Open the file mbox.txt-short.txt and read it line by line. When you find a line that starts with 'From '
# like the following line:
# From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
# You will parse the From line using split() and print out the second word in the line (i.e. the entire
# address of the person who sent the message). Then print out a count at the end.

fname = input("Enter file name: ")
if len(fname) < 1: fname = "mbox.txt-short.txt"

fh = open(fname)
count = 0

for line in fh:
    line = line.rstrip()
    if not line.startswith('From '): continue
    words = line.split()
    print(words[1])
    count += 1

print("There were", count, "lines in the file with From as the first word")

# 9.4 Write a program to read through the mbox.txt-short.txt and figure out who has sent the greatest number of
# mail messages. The program looks for 'From ' lines and takes the second word of those lines as the person
# who sent the mail. The program creates a Python dictionary that maps the sender's mail address to a count
# of the number of times they appear in the file. After the dictionary is produced, the program reads through
# the dictionary using a maximum loop to find the most prolific committer.

name = input("Enter file:")
if len(name) < 1 : name = "mbox.txt-short.txt"
handle = open(name)
txt = handle.read()

palabras = list()

for line in handle:
    if not line.startswith("From:"): continue
    line = line.split()
    palabras.append(line[1])

cnt = dict()

for word in palabras:
    cnt[word] = cnt.get(word, 0) + 1

maximumvalue = None
maximumkey = None

for key,val in cnt.items():
    if val > maximumvalue:
        maximumvalue = val
        maximumkey = key

print(maximumkey, maximumvalue)

# 10.2 Write a program to read through the mbox.txt-short.txt and figure out the distribution by hour of the day
# for each of the messages. You can pull the hour out from the 'From ' line by finding the time and then
# splitting the string a second time using a colon.
# From stephen.marquard@uct.ac.za Sat Jan  5 09:14:16 2008
# Once you have accumulated the counts for each hour, print out the counts, sorted by hour as shown below.

name = input("Enter file:")
if len(name) < 1: name = "mbox.txt-short.txt"
handle = open(name)

cnt = dict()

for line in handle:
    if line.startswith("From "):
        tiempo = line.split()[5].split(":")
        cnt[tiempo[0]] = cnt.get(tiempo[0], 0) + 1

# print sorted( [ (v,k) for k,v in counts.items()] )
lista = list()

for key, value in cnt.items():
    lista.append((key, value))
lista.sort()

for hour, cnt in lista:
    print(hour, cnt)
